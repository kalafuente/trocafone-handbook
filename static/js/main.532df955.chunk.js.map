{"version":3,"sources":["components/home/HomeStyles.tsx","components/home/index.tsx","components/generic-page/GenericStyles.tsx","components/about/index.tsx","components/values/index.tsx","components/menu/MenuStyles.tsx","components/menu/index.tsx","AppStyles.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Item","styled","nav","SubItem","div","Home","Grid","container","spacing","item","xs","style","background","color","sm","ItemContainer","About","Values","MenuContainer","LinkStyle","a","MenuItem","Image","Navigation","marginLeft","to","src","alt","justifyContent","marginRight","AppContainer","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6RAEaA,EAAOC,IAAOC,IAAV,yJAQJC,EAAUF,IAAOC,IAAV,4H,GAQID,IAAOG,IAAV,4B,MCaNC,EA3B2B,SAAC,GACvC,OADgD,eAE5C,eAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAzB,UACI,cAACF,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIC,MAAO,CAAEC,WAAY,UAAWC,MAAO,SAA1D,SACI,cAACb,EAAD,UACI,wEAKR,cAACM,EAAA,EAAD,CAAMK,MAAO,CAAEC,WAAY,WAAaH,MAAI,EAACC,GAAI,GAAII,GAAI,EAAzD,SACI,cAACX,EAAD,yBAGJ,cAACG,EAAA,EAAD,CAAMK,MAAO,CAAEC,WAAY,WAAaH,MAAI,EAACC,GAAI,GAAII,GAAI,EAAzD,SACI,cAACX,EAAD,oBAEJ,cAACG,EAAA,EAAD,CAAMK,MAAO,CAAEC,WAAY,WAAaH,MAAI,EAACC,GAAI,GAAII,GAAI,EAAzD,SACI,cAACX,EAAD,oCAEJ,cAACG,EAAA,EAAD,CAAMK,MAAO,CAAEC,WAAY,WAAaH,MAAI,EAACC,GAAI,GAAII,GAAI,EAAzD,SACI,cAACX,EAAD,mCCvBHH,EAAOC,IAAOG,IAAV,2KAQJW,EAAgBd,IAAOG,IAAV,6ECGXY,EAV4B,SAAC,GACxC,OADiD,eAE7C,eAACD,EAAD,WACI,cAAC,EAAD,0BACA,cAAC,EAAD,uBACA,cAAC,EAAD,4BCMGE,EARsC,SAAC,GAClD,OAD2D,eAEvD,oDCNKC,EAAgBjB,IAAOC,IAAV,4LAUbC,EAAUF,IAAOG,IAAV,8BAIPe,EAAYlB,IAAOmB,EAAV,kGAITC,EAAWpB,IAAOG,IAAV,wIAQRkB,EAAQrB,IAAOG,IAAV,+CCNHmB,EAlBiC,SAAC,GAC7C,OADsD,eAElD,iCACI,eAACL,EAAD,WACI,cAAC,EAAD,UACI,cAACI,EAAD,CAAOX,MAAO,CAAEa,WAAY,QAA5B,SAAsC,cAAC,IAAD,CAAMC,GAAG,sBAAT,SAA+B,qBAAKC,IAAI,mEAAmEC,IAAI,eAEzJ,eAAC,EAAD,CAAUhB,MAAO,CAAEiB,eAAgB,iBAAnC,UACI,cAAC,EAAD,UAAS,cAAC,IAAD,CAAMH,GAAG,4BAAT,SAAqC,cAACN,EAAD,4BAC9C,cAAC,EAAD,UAAW,cAAC,IAAD,CAAMM,GAAG,6BAAT,SAAsC,cAACN,EAAD,sBACjD,cAAC,EAAD,UAAU,cAAC,IAAD,CAAMM,GAAG,6BAAT,SAAsC,cAACN,EAAD,sCAChD,cAAC,EAAD,CAASR,MAAO,CAAEkB,YAAa,QAA/B,SAAyC,cAAC,IAAD,CAAMJ,GAAG,6BAAT,SAAsC,cAACN,EAAD,gCCbtFW,EAAe7B,IAAOG,IAAV,sJCqBV2B,EAfH,WACV,OACE,cAACD,EAAD,UACE,eAAC,IAAD,WACE,cAAC,EAAD,IACA,eAAC,IAAD,WACE,cAAC,IAAD,CAAOE,OAAK,EAACC,KAAK,sBAAsBC,UAAW7B,IACnD,cAAC,IAAD,CAAO4B,KAAK,4BAA4BC,UAAWlB,IACnD,cAAC,IAAD,CAAOiB,KAAK,6BAA6BC,UAAWjB,aCJ1CkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACL,cAAC,EAAD,IACAC,SAASC,eAAe,SDoItB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.532df955.chunk.js","sourcesContent":["import styled from 'styled-components'\n\nexport const Item = styled.nav`\n    height: 300px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    border: solid 1px grey;\n`\n\nexport const SubItem = styled.nav`\n    height: 300px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n`\n\n\nexport const MenuItem = styled.div`\n`\n","import React from 'react'\nimport Grid from '@material-ui/core/Grid';\nimport { Item, SubItem } from './HomeStyles';\n\nconst Home: React.FunctionComponent<{}> = ({ }) => {\n    return (\n        <Grid container spacing={3}>\n            <Grid item xs={12} style={{ background: \"#202020\", color: \"white\" }}>\n                <Item>\n                    <h3>\n                        Te damos la bienvenida a trocafone\n                    </h3>\n                </Item>\n            </Grid>\n            <Grid style={{ background: \"#FAFAFA\" }} item xs={12} sm={6}>\n                <SubItem>Que es T</SubItem>\n            </Grid>\n\n            <Grid style={{ background: \"#F0F0F0\" }} item xs={12} sm={6}>\n                <SubItem >VyC</SubItem>\n            </Grid>\n            <Grid style={{ background: \"#F0F0F0\" }} item xs={12} sm={6}>\n                <SubItem >Estructura y equipo</SubItem>\n            </Grid>\n            <Grid style={{ background: \"#FAFAFA\" }} item xs={12} sm={6}>\n                <SubItem>Primeros pasos</SubItem>\n            </Grid>\n        </Grid>\n    )\n}\n\nexport default Home","import styled from 'styled-components'\n\nexport const Item = styled.div`\n    height: 400px;\n    width: 100%;\n    border: solid 1px grey;\n    align-items: center;\n    display: flex;\n    justify-content: center;\n`\nexport const ItemContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n`\n","import React from 'react'\nimport { Item, ItemContainer } from '../generic-page/GenericStyles';\n\nconst About: React.FunctionComponent<{}> = ({ }) => {\n    return (\n        <ItemContainer>\n            <Item>La historia</Item>\n            <Item>Historia</Item>\n            <Item >productos</Item>\n        </ItemContainer>\n    )\n}\n\nexport default About","import React from 'react'\n\ntype ValuesProps = {\n\n}\n\nconst Values: React.FunctionComponent<ValuesProps> = ({ }) => {\n    return (\n        <div>\n            Nuestros valores\n        </div>\n    )\n}\n\nexport default Values","import styled from 'styled-components'\n\nexport const MenuContainer = styled.nav`\n    width: 100%;\n    display:flex;\n    margin-bottom: 30px;\n    align-items: center;\n    @media (max-width: 768px) {\n    flex-direction: column;\n    }\n\n`\nexport const SubItem = styled.div`\n\n`\n\nexport const LinkStyle = styled.a`\n    color:#6C8EDB !important;\n    text-decoration: none !important;\n`\nexport const MenuItem = styled.div`\n    display:flex;\n    width: 100%;\n    @media (max-width: 768px) {\n    flex-direction: column;\n    }\n\n`\nexport const Image = styled.div`\n    width: 250px;\n`\n\n\n","import React from 'react'\nimport { Link } from 'react-router-dom';\nimport { MenuContainer, MenuItem, SubItem, Image, LinkStyle } from './MenuStyles';\n\nconst Navigation: React.FunctionComponent<{}> = ({ }) => {\n    return (\n        <header>\n            <MenuContainer>\n                <MenuItem>\n                    <Image style={{ marginLeft: \"30px\" }}><Link to=\"/trocafone-handbook\"><img src=\"https://www.trocafone.com/assets/img/global/common/trocafone.svg\" alt=\"Logo\" /></Link></Image>\n                </MenuItem>\n                <MenuItem style={{ justifyContent: \"space-between\" }}>\n                    <SubItem><Link to=\"/trocafone-handbook/about\"><LinkStyle>Que es T?</LinkStyle></Link></SubItem>\n                    <SubItem  ><Link to=\"/trocafone-handbook/values\"><LinkStyle>VyC</LinkStyle></Link></SubItem>\n                    <SubItem ><Link to=\"/trocafone-handbook/values\"><LinkStyle>Estructura y equipo</LinkStyle></Link></SubItem>\n                    <SubItem style={{ marginRight: \"60px\" }}><Link to=\"/trocafone-handbook/values\"><LinkStyle>Vida</LinkStyle></Link></SubItem>\n                </MenuItem>\n            </MenuContainer>\n        </header>\n    )\n}\n\nexport default Navigation","import styled from 'styled-components'\n\nexport const AppContainer = styled.div`\n  text-align: center;\n  padding-top: 30px;\n  overflow: hidden;\n  @media (max-width: 768px) {\n    padding: 15px;\n  }\n`\n","import './App.css';\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport Home from \"./components/home\"\nimport About from \"./components/about\"\nimport Values from \"./components/values\"\nimport Navigation from './components/menu/index';\nimport { AppContainer } from './AppStyles';\n\nconst App = () => {\n  return (\n    <AppContainer>\n      <Router>\n        <Navigation />\n        <Switch>\n          <Route exact path=\"/trocafone-handbook\" component={Home} />\n          <Route path=\"/trocafone-handbook/about\" component={About} />\n          <Route path=\"/trocafone-handbook/values\" component={Values} />\n        </Switch>\n      </Router>\n    </AppContainer>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}