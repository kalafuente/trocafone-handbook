{"version":3,"sources":["logo.svg","components/Button/ButtonStyles.tsx","components/Button/Button.tsx","modules/redux-example/todos/ducks/index.ts","modules/redux-example/todos/containers/AddTodo.tsx","modules/redux-example/visibleFilter/ducks/index.ts","modules/redux-example/todos/components/Todo.tsx","modules/redux-example/todos/components/ToDoList.tsx","modules/redux-example/visibleFilter/containers/VisibleToDoList.tsx","App.tsx","serviceWorker.ts","store/index.tsx","index.tsx"],"names":["ButtonStyled","styled","button","props","primary","Button","text","this","Fragment","React","PureComponent","nextTodoId","connect","input","dispatch","onSubmit","e","preventDefault","value","trim","type","id","ref","node","VisibilityFilters","Todo","onClick","completed","style","textDecoration","TodoList","todos","toggleTodo","map","todo","getVisibleTodos","filter","t","Error","state","visibilityFilter","App","className","src","logo","alt","to","path","Boolean","window","location","hostname","match","store","createStore","combineReducers","action","composeWithDevTools","applyMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.060f945b.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","import styled from 'styled-components'\n\ntype ButtonProps = {\n  primary?: boolean\n}\n\nexport const ButtonStyled = styled.button`\n  background: ${(props: ButtonProps) => props.primary ? \"palevioletred\" : \"white\"};\n  color: ${(props: ButtonProps) => props.primary ? \"white\" : \"palevioletred\"};\n  font-size: 1em;\n  margin: 1em;\n  padding: 0.25em 1em;\n  border: 2px solid palevioletred;\n  border-radius: 3px;\n`;","import React from 'react';\nimport { ButtonStyled } from './ButtonStyles';\n\ntype ButtonProps = {\n    text: string\n}\n\nexport class Button extends React.PureComponent<ButtonProps> {\n    render() {\n        const { text } = this.props\n        return (\n            <React.Fragment>\n                <ButtonStyled>\n                    {text}\n                </ButtonStyled>\n            </React.Fragment>\n        );\n    }\n}","import { ActionCreator } from '../../../../models/ActionCreator';\n\n//actions\nexport const ADD_TODO: string = 'ADD_TODO'\nexport const TOGGLE_TODO: string = 'TOGGLE_TODO'\n\n//reducer\nexport function todos(state = [], action: ActionCreator) {\n    switch (action.type) {\n        case 'ADD_TODO':\n            return [\n                ...state,\n                {\n                    id: action.id,\n                    text: action.text,\n                    completed: false\n                }\n            ]\n        case 'TOGGLE_TODO':\n            //sacar el any\n            return state.map((todo: any) =>\n                (todo.id === action.id)\n                    ? { ...todo, completed: !todo.completed }\n                    : todo\n            )\n        default:\n            return state\n    }\n}\n\n// Action creators\nlet nextTodoId = 0\nexport const addTodo = (text: string) => ({\n    type: ADD_TODO,\n    id: nextTodoId++,\n    text\n})\n\nexport const toggleTodo = (id: string) => ({\n    type: TOGGLE_TODO,\n    id\n})\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport { addTodo } from '../ducks/index';\n\n//tipos\nconst AddTodo = ({ dispatch }: any) => {\n    let input: any\n\n    return (\n        <div>\n            <form onSubmit={e => {\n                e.preventDefault()\n                if (!input.value.trim()) {\n                    return\n                }\n                dispatch(addTodo(input.value))\n                input.value = ''\n            }}>\n                <input ref={node => input = node} />\n                <button type=\"submit\">\n                    Add Todo\n        </button>\n            </form>\n        </div>\n    )\n}\n\nexport default connect()(AddTodo)\n","import { ActionCreator } from '../../../../models/ActionCreator';\n//TODO: tipos\n//actions\nexport const SET_VISIBILITY_FILTER: string = 'SET_VISIBILITY_FILTER'\n\n//reducer\nexport const VisibilityFilters = {\n    SHOW_ALL: 'SHOW_ALL',\n    SHOW_COMPLETED: 'SHOW_COMPLETED',\n    SHOW_ACTIVE: 'SHOW_ACTIVE'\n}\n\nexport function visibilityFilter(state = VisibilityFilters.SHOW_ALL, action: ActionCreator) {\n    switch (action.type) {\n        case 'SET_VISIBILITY_FILTER':\n            return action.filter\n        default:\n            return state\n    }\n}\n\n// Action creators\nexport const setVisibilityFilter = (filter: string) => ({\n    type: SET_VISIBILITY_FILTER,\n    filter\n})\n\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst Todo = ({ onClick, completed, text }: any) => (\n    <li\n        onClick={onClick}\n        style={{\n            textDecoration: completed ? 'line-through' : 'none'\n        }}\n    >\n        {text}\n    </li>\n)\n\nTodo.propTypes = {\n    onClick: PropTypes.func.isRequired,\n    completed: PropTypes.bool.isRequired,\n    text: PropTypes.string.isRequired\n}\n\nexport default Todo\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Todo from './Todo'\n\nconst TodoList = ({ todos, toggleTodo }: any) => (\n    <ul>\n        {todos.map((todo: any) =>\n            <Todo\n                key={todo.id}\n                {...todo}\n                onClick={() => toggleTodo(todo.id)}\n            />\n        )}\n    </ul>\n)\n\nTodoList.propTypes = {\n    todos: PropTypes.arrayOf(PropTypes.shape({\n        id: PropTypes.number.isRequired,\n        completed: PropTypes.bool.isRequired,\n        text: PropTypes.string.isRequired\n    }).isRequired).isRequired,\n    toggleTodo: PropTypes.func.isRequired\n}\n\nexport default TodoList","import { connect } from 'react-redux'\nimport { VisibilityFilters } from '../ducks'\nimport { toggleTodo } from '../../todos/ducks'\nimport TodoList from '../../todos/components/ToDoList';\n\nconst getVisibleTodos = (todos: any, filter: any) => {\n    switch (filter) {\n        case VisibilityFilters.SHOW_ALL:\n            return todos\n        case VisibilityFilters.SHOW_COMPLETED:\n            return todos.filter((t: any) => t.completed)\n        case VisibilityFilters.SHOW_ACTIVE:\n            return todos.filter((t: any) => !t.completed)\n        default:\n            throw new Error('Unknown filter: ' + filter)\n    }\n}\n\nconst mapStateToProps = (state: any) => ({\n    todos: getVisibleTodos(state.todos, state.visibilityFilter)\n})\n\nconst mapDispatchToProps = (dispatch: any) => ({\n    toggleTodo: (id: any) => dispatch(toggleTodo(id))\n})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(TodoList)\n","import logo from './logo.svg';\nimport './App.css';\nimport { Button } from './components/Button/Button';\nimport AddTodo from './modules/redux-example/todos/containers/AddTodo';\nimport VisibleTodoList from './modules/redux-example/visibleFilter/containers/VisibleToDoList'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.tsx</code> and save to reload.\n        </p>\n        <Button text=\"haceme click\"></Button>\n        <AddTodo />\n        <VisibleTodoList />\n        <Router>\n          <div>\n            <nav>\n              <ul>\n                <li>\n                  <Link to=\"/\">Home</Link>\n                </li>\n                <li>\n                  <Link to=\"/que-es-troca\">Trocafone</Link>\n                </li>\n                <li>\n                  <Link to=\"/vida\">vida</Link>\n                </li>\n              </ul>\n            </nav>\n\n            {/* A <Switch> looks through its children <Route>s and\n            renders the first one that matches the current URL. */}\n            <Switch>\n              <Route path=\"/que-es-troca\">\n                <div> que es trocafone</div>\n              </Route>\n              <Route path=\"/vida\">\n                <div> vida</div>\n              </Route>\n            </Switch>\n          </div>\n        </Router>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { createStore, applyMiddleware } from 'redux'\nimport { combineReducers } from 'redux'\nimport { visibilityFilter } from '../modules/redux-example/visibleFilter/ducks/index'\nimport { todos } from '../modules/redux-example/todos/ducks'\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nconst middlewares: any[] = [];\nexport const store = createStore(\n    combineReducers({\n        todos,\n        visibilityFilter\n    }),\n    composeWithDevTools(\n        applyMiddleware(...middlewares),\n        // other store enhancers if any\n    )\n)\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { store } from './store';\nimport { Provider } from 'react-redux'\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}